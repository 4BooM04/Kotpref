import dependencies.Deps
import dependencies.Versions

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext.versionName = Versions.versionName
    ext.groupName = 'com.chibatching.kotpref'

    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath Deps.androidGradlePlugin
        classpath Deps.Kotlin.gradlePlugin
        classpath Deps.bintrayGradlePlugin
        classpath Deps.androidMavenGradlePlugin
        classpath Deps.dokkaAndroidGradlePlugin
    }
}

allprojects {
    apply plugin: 'jacoco'
    repositories {
        jcenter()
        google()
    }
    jacoco {
        toolVersion = "0.7.9"
    }
}

task replaceVersionInReadme() {
    ant.replaceregexp(match: 'com\\.chibatching\\.kotpref:(.+):([0-9\\.]+)', replace: "com.chibatching.kotpref:\\1:${Versions.versionName}", flags: 'g') {
        fileset(dir: project.projectDir, includes: 'README.md')
    }
    ant.replaceregexp(match: 'android\\.arch\\.lifecycle:livedata:([0-9\\.]+)', replace: "android.arch.lifecycle:livedata:${Versions.arch}", flags: 'g') {
        fileset(dir: project.projectDir, includes: 'README.md')
    }
    ant.replaceregexp(match: 'com\\.google\\.code\\.gson:gson:([0-9\\.]+)', replace: "com.google.code.gson:gson:${Versions.gson}", flags: 'g') {
        fileset(dir: project.projectDir, includes: 'README.md')
    }
    ant.replaceregexp(match: 'org\\.jetbrains\\.kotlin:kotlin-reflect:([0-9\\.]+)', replace: "org.jetbrains.kotlin:kotlin-reflect:${Versions.kotlin}", flags: 'g') {
        fileset(dir: project.projectDir, includes: 'README.md')
    }
    ant.replaceregexp(match: 'kotlin-([0-9\\.]+)-blue\\.svg', replace: "kotlin-${Versions.kotlin}-blue.svg", flags: 'g') {
        fileset(dir: project.projectDir, includes: 'README.md')
    }
}

configure(subprojects.findAll { it.name != 'sample' }) {
    task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/kotlin"

        sourceDirectories = files([mainSrc])
        classDirectories = files([debugTree], [kotlinDebugTree])
        executionData = fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec"
        ])
    }
}

static def env(String name, String defValue) {
    def value = System.getenv()[name]
    return value == null ? defValue : value
}
